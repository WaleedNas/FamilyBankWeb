@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IHttpClientFactory clientFactory
@inject ISessionStorageService sessionStorage

<!DOCTYPE html>
<html lang="en">
  <head>
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />

        <link
          href="https://fonts.googleapis.com/css?family=Montserrat:400,700"
          rel="stylesheet"
        />
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
        />

        <!--<link rel="stylesheet" href="css/icon-font.css">-->

        <link rel="stylesheet" href="css/style.css" />
        <link rel="shortcut icon" type="image/png" href="img/favicon.png" />


      </head>
</head>
<body>
    <header class="accountHeader">
        <h1 class="accountHeader__h1">@user.firstName @user.lastName</h1>
        <nav class="accountHeader__nav">
            <ul class="accountHeader__list">
                <li class="accountHeader__item">
                    <a href="familyPage.html">Family</a>
                </li>
                <li class="accountHeader__item">
                    <a href="/addMember"> Add Family Member</a>
                </li>
                <li class="accountHeader__item">
                    <a href="familyPage.html">Account Statistics</a>
                </li>
                <li class="accountHeader__item">
                    <a href="/">Home</a>
                </li>
            </ul>
        </nav>
    </header>
@Body
</body>
</html>

@code{
    private UserModel user = new UserModel();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserData data = new UserData(clientFactory, sessionStorage);
            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                if (authState.User.Identity.IsAuthenticated)
                {
                    string claimValue = authState.User.Claims.FirstOrDefault()?.ToString();
                    user = await data.GetUserFromContext(claimValue);
                }

            }


        }
        catch (Exception ex)
        {
            // Handle the exception here
            ex.Message.ToString();
        }
    }
}
