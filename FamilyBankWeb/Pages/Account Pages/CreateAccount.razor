@page "/createAcc"
@layout CreateAccountLayout
@inject ISessionStorageService sessionStorage
@inject IHttpClientFactory clientFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]

<title>FamBank | Account Page</title>

<main>


    <section class="paybills">
        <h2 class="heading-secondary"
            style="
              font-size: 3rem;
              margin-top: -18rem;
              margin-bottom: 2rem;
              margin-left: 0;
              margin-right: 0;
            ">
            Create Your Bank Account
        </h2>
        <h2>@errorMessage</h2>
        <!-- fix text fields width & position -->
        <div class="paybills__form">
            <EditForm Model="@accountModel" OnValidSubmit="HandleSubmit" id="deposit">
                <div class="home__balance" style="margin-top:5rem">

                    <h3>Enter initial amount to deposit:</h3>
                </div>
                <InputNumber placeholder="0.00"
                             id="balance"
                             class="form__input"
                             style="text-align: center"
                             @bind-Value=accountModel.balance
                             inputmode="numeric"
                             required />
                <br />

                <button type="submit" style="margin-top:3rem; margin-left: 6rem" class="btn btn--green">Create Account &rarr;</button>
            </EditForm>
        </div>
    </section>
</main>
@code {
    private UserModel user = new UserModel();
    private string errorMessage { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserData data = new UserData(clientFactory, sessionStorage);
            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                if (authState.User.Identity.IsAuthenticated)
                {
                    string claimValue = authState.User.Claims.FirstOrDefault()?.ToString();
                    user = await data.GetUserFromContext(claimValue);
                }

            }


        }
        catch (Exception ex)
        {
            // Handle the exception here
            ex.Message.ToString();
        }
    }

    private AccountModel accountModel = new AccountModel();
    private async Task HandleSubmit()
    {
        try
        {
            var accountData = new AccountData(clientFactory);
            var response = await accountData.CreateAccount(user.userID, accountModel.balance);

            if (response != null)
            {
                NavigationManager.NavigateTo("/");
            }

        }
        catch (Exception ex)
        {
            
        }
    }
}
