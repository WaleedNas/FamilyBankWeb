@page "/account"
@using FamilyBankWeb.Helpers
@layout AccountLayout
@inject ISessionStorageService sessionStorage
@inject IHttpClientFactory clientFactory
@inject NavigationManager NavigationManager
@inject IDataProtectionProvider dataProtection
@inject IJSRuntime JS
@attribute [Authorize (Roles ="Main, Sub")]
<title>FamBank | Account Page</title>

<head>
    <link rel="stylesheet" href="css/chatbotStyle.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons"/>
</head>

<main>

    
    <section id="home">
        <div class="home__balance">
            <h3>Balance:</h3>
            <p>AED @Balance</p>
        </div>

        <div class="credit-card">
            <div class="credit-card__inner">
                <div class="credit-card__front">
                    <h2 class="credit-card__title">FamBank Credit Card</h2>
                    <div class="credit-card__number">@cardNum</div>
                    <div class="credit-card__details">
                        <div class="credit-card__detail">
                            <div class="credit-card__label">Cardholder Name</div>
                            <div class="credit-card__value">@card.cardHolderName</div>
                        </div>
                        <div class="credit-card__detail">
                            <div class="credit-card__label">Expiration Date</div>
                            <div class="credit-card__value">@card.expiryDate.ToString("MM/yy")</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <AuthorizeView Roles="Main">

        <div class="home__buttons">
            <a href="/paybills" class="home__button btn btn--white btn--animated">
                <i class="fas fa-dollar-sign"></i>
                Pay Bills
            </a>
            <a class="home__button btn btn--white btn--animated">
                <i class="fas fa-credit-card"></i>

                Debit
            </a>
            <a class="home__button btn btn--white btn--animated">
                <i class="fas fa-arrow-up"></i>
                Allowance
            </a>
        </div>
        </AuthorizeView>
        <div class="home__transactions">
            <h3>Recent Transactions:</h3>

            <ul>
                <AuthorizeView Roles="Main">
                @foreach (var transaction in transactions.Take(3))
				{
					<li>
                        @transaction.transactionDate - AED @transaction.amount - @transaction.title @if (transaction.debit)
                        {
                            <span style="color:red"> -</span>
                        }
                        else
                        {
                            <span style="color:green"> +</span>
                            
                        }
                    </li>
				}
                </AuthorizeView>
                <AuthorizeView Roles="Sub">
                    @foreach (var transaction in subTransactions.Take(3))
                    {
                        <li>
                            @transaction.transactionDate - AED @transaction.amount - @transaction.title @if (transaction.debit)
                            {
                                <span style="color:red"> -</span>
                            }
                            else
                            {
                                <span style="color:green"> +</span>

                            }
                        </li>
                    }
                </AuthorizeView>
            </ul>
            <a href="/statement" class="home__view-transactions btn"> Transactions Statement </a>
        </div>
    </section>
</main>

<div id="chat-circle" class="btn btn-raised">
    <div id="chat-overlay"></div>
    <i class="material-icons">chatbubbleonline</i>
</div>

<div class="chat-box">
    <div class="chat-box-header">
        ChatBot
        <span class="chat-box-toggle"><i class="material-icons">close</i></span>
    </div>
    <div class="chat-box-body">
        <div class="chat-box-overlay">
        </div>
        <div class="chat-logs">
        </div><!--chat-log -->
    </div>
    <div class="chat-input">
        <form autocomplete="off" action="#" onsubmit="return false">
            <input type="text" id="chat-input" placeholder="Send a message..." />
            <button type="button" class="chat-submit" id="chat-submit" @onclick="@(async () => await OnSubmit())"><i class="material-icons">send</i></button>
        </form>
    </div>
</div>


@code {
    private UserModel user = new UserModel();
    private AccountModel accountModel = new AccountModel();
    private AccountUserModel accountUser = new AccountUserModel();
    private CardModel card = new CardModel();
    private List<TransactionModel> transactions = new List<TransactionModel>();
    private List<TransactionModel> subTransactions = new List<TransactionModel>();
    int accountID { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private double Balance { get; set; }
    string cardNum { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserData data = new UserData(clientFactory, sessionStorage);
            AccountData accountData = new AccountData(clientFactory);
            CardData cardData = new CardData(clientFactory);
            TransactionData transactionData = new TransactionData(clientFactory);
            var accountIDString_p = await sessionStorage.GetItemAsync<string>("accountID");
            var protector = dataProtection.CreateProtector("TheProtector");
            var accountIDString = protector.Unprotect(accountIDString_p);
            accountID = int.Parse(accountIDString);


            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                if (authState.User.Identity.IsAuthenticated)
                {

                    string claimValue = authState.User.Claims.ElementAtOrDefault(1)?.ToString();
                    user = await data.GetUserFromContext(claimValue);
                    card = await cardData.GetAccountCard(accountID);
                    //give the card number string a space every four characters and assign it to cardNum
                    cardNum = card.cardNumber;
                    cardNum = cardNum.Insert(4, " ");
                    cardNum = cardNum.Insert(9, " ");
                    cardNum = cardNum.Insert(14, " ");

                    try
                    {
                        transactions = await transactionData.GetTransactionsForAccount(accountID);
                        subTransactions = await transactionData.GetUserTransactionsForAccount(user.userID, accountID);

                    }
                    catch(Exception e)
                    {
                        
                    }

                    transactions = transactions.OrderByDescending(t => t.transactionDate).ToList();
                    subTransactions = subTransactions.OrderByDescending(t => t.transactionDate).ToList();
                    accountModel = await accountData.GetAccount(accountID);
                    Balance = await accountData.GetBalance(accountID, user.userID);

                }
            }


        }
        catch (Exception ex)
        {
            // Handle the exception here
            ex.Message.ToString();
        }

        await Task.Delay(1000);

        GptCompletion.Initialize(true);
        await JS.InvokeVoidAsync("onLoad");

    }

    private async Task OnSubmit()
    {
        await JS.InvokeVoidAsync("onSubmit", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task SendToChatbot(string input)
    {
        var response = await GptCompletion.AskChatbot(input);
        await JS.InvokeVoidAsync("chatbotReply", response);
    }

}
