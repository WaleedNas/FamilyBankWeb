@page "/account"
@layout AccountLayout
@inject ISessionStorageService sessionStorage
@inject IHttpClientFactory clientFactory
@inject NavigationManager NavigationManager
@inject IDataProtectionProvider dataProtection
@attribute [Authorize (Roles ="Main, Sub")]
<title>FamBank | Account Page</title>

<main>

    
    <section id="home">
        <div class="home__balance">
            <h3>Balance:</h3>
            <p>$@Balance</p>
        </div>

        <div class="credit-card">
            <div class="credit-card__inner">
                <div class="credit-card__front">
                    <h2 class="credit-card__title">FamBank Credit Card</h2>
                    <div class="credit-card__number">@card.cardNumber</div>
                    <div class="credit-card__details">
                        <div class="credit-card__detail">
                            <div class="credit-card__label">Cardholder Name</div>
                            <div class="credit-card__value">@card.cardHolderName</div>
                        </div>
                        <div class="credit-card__detail">
                            <div class="credit-card__label">Expiration Date</div>
                            <div class="credit-card__value">@card.expiryDate</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <AuthorizeView Roles="Main">

        <div class="home__buttons">
            <a href="/paybills" class="home__button btn btn--white btn--animated">
                <i class="fas fa-dollar-sign"></i>
                Pay Bills
            </a>
            <a class="home__button btn btn--white btn--animated">
                <i class="fas fa-credit-card"></i>

                Debit
            </a>
            <a class="home__button btn btn--white btn--animated">
                <i class="fas fa-arrow-up"></i>
                Allowance
            </a>
        </div>
        </AuthorizeView>
        <div class="home__transactions">
            <h3>Recent Transactions:</h3>

            <ul>
                @foreach (var transaction in transactions)
				{
					<li>@transaction.createdDate - $@transaction.amount</li>
				}
            </ul>
            <a class="home__view-transactions btn"> View All Transactions </a>
        </div>
    </section>
</main>

@code {
    private UserModel user = new UserModel();
    private AccountModel accountModel = new AccountModel();
    private AccountUserModel accountUser = new AccountUserModel();
    private CardModel card = new CardModel();
    private List<TransactionModel> transactions = new List<TransactionModel>();
    int accountID { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private double Balance { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserData data = new UserData(clientFactory, sessionStorage);
            AccountData accountData = new AccountData(clientFactory);
            CardData cardData = new CardData(clientFactory);
            var accountIDString_p = await sessionStorage.GetItemAsync<string>("accountID");
            var protector = dataProtection.CreateProtector("TheProtector");
            var accountIDString = protector.Unprotect(accountIDString_p);
            accountID = int.Parse(accountIDString);


            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                if (authState.User.Identity.IsAuthenticated)
                {

                    string claimValue = authState.User.Claims.ElementAtOrDefault(1)?.ToString();
                    user = await data.GetUserFromContext(claimValue);
                    card = await cardData.GetAccountCard(accountID);
                    accountModel = await accountData.GetAccount(accountID);
                    Balance = await accountData.GetBalance(accountID, user.userID);

                }
            }


        }
        catch (Exception ex)
        {
            // Handle the exception here
            ex.Message.ToString();
        }
    }
}
