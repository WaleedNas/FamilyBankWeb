@page "/addMember"
@layout AccountLayout
@inject IHttpClientFactory clientFactory
@inject ISessionStorageService sessionStorage
@inject IDataProtectionProvider dataProtection
@attribute [Authorize (Roles ="Main")]

<div class="booke">
                <div class="book__form">
                    <EditForm Model=@addMemberModel OnValidSubmit=HandleSubmit class="form">

                        <div class="u-margin-bottom-medium">
                            <h2 class="heading-secondary">Add New Member</h2>
                        </div>
                        <h3>Warning: Add an existing User</h3>
                        <div class="form__group" >
                            <InputText
                                    class="form__input"
                                    placeholder="Username"
                                    id="username"
                                    @bind-Value=addMemberModel.username
                                    required />
                            <label for="username" class="form__label">Username</label>
                        </div>

                    <div class="form__group" 
                            <InputText
                                    type="password"
                                    class="form__input"
                                    placeholder="User's Password"
                                    id="password"
                                    @bind-Value=addMemberModel.password
                                    required />
                            <label for="password" class="form__label">User's Password</label>
                        </div>

                    <div class="form__group">
                <h3> Privilege Status</h3>
                            <select
                                    class="form__input"
                                    placeholder="Username"
                                    id="username"
                                    @bind=priv
                                   
                                    required>
                                    <option value="Main"> Main</option>
                                    <option value="Sub"> Sub</option>
                                    </select>
                        </div>

                        <div class="form__group">
                            <h3> Add Initial Balance (If Sub Only)</h3>
                        <InputNumber placeholder="0.00"
                                 id="balance"
                                 @bind-Value=addMemberModel.balance
                                 inputmode="numeric"
                             style="font-size: 2rem;
                                    text-align: center;
                                    width: 20rem;
                                    padding: 1rem;
                                    border-radius: 5px;"
                                 required />
                        </div>

                        <div class="form__group" style="margin-top:1rem;">
                            <h3>@loadingMessage</h3>
                            <button type="submit" class="btn btn--green">Add Member &rarr;</button>
                        </div>

                    </EditForm>
                </div>
            </div>
@code {

    AccountUserModel accountUserModel = new AccountUserModel();
    UserLoginModel userLoginModel = new UserLoginModel();
    AddMemberModel addMemberModel = new AddMemberModel();
    AccountModel accountModel = new AccountModel();
    int accountID { get; set; }
    string loadingMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AccountData accountData = new AccountData(clientFactory);
            var accountIDString_p = await sessionStorage.GetItemAsync<string>("accountID");
            var protector = dataProtection.CreateProtector("TheProtector");
            var accountIDString = protector.Unprotect(accountIDString_p);
            accountID = int.Parse(accountIDString);
            accountModel = await accountData.GetAccount(accountID);

        } catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public enum Privilege
    {
        Main,
        Sub
    }

    Privilege priv = new Privilege();

    private async Task HandleSubmit()
    {
        try
        {
            addMemberModel.priv = priv.ToString();
            loadingMessage = "Waiting for response";
            UserData userData = new UserData(clientFactory, sessionStorage);
            AccountData accountData = new AccountData(clientFactory);
            userLoginModel.username = addMemberModel.username;
            userLoginModel.password = addMemberModel.password;
            if (addMemberModel.priv == "Main")
            {
                accountUserModel.isMain = true;
                accountUserModel.balanceAvailable = accountModel.balance;
            }
            else
            {
                accountUserModel.isMain = false;
            accountUserModel.balanceAvailable = addMemberModel.balance;
            }

            int userID = await userData.GetIdFromLogin(userLoginModel);
            if (userID != -1)
            {
                accountUserModel.userID = userID;
                accountUserModel.accountID = accountID;
                var response = await accountData.CreateAccountUser(accountUserModel);
                if (response.IsSuccessStatusCode && userID != -1)
                {
                    loadingMessage = "Account Successfully Added";
                }
                else
                {
                    loadingMessage = "User is already added";
                }
            }
            else
            {
                loadingMessage = "Incorrect Username or password";
            }

            
        }
        catch (Exception ex)
        {
            
        }
    }
}
